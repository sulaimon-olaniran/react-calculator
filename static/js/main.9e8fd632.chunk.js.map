{"version":3,"sources":["App.js","components/screen.js","components/button.js","serviceWorker.js","index.js"],"names":["Hello","props","clearScreen","setState","current","previous","mathSign","nextIsReset","addToCurrent","symbol","state","length","redAlert","addSign","push","autoCalculate","alert","eval","String","calculate","signs","buttons","cols","action","this","className","symboled","preValue","display","map","btn","i","key","actions","symbols","Component","Screen","value","maxLength","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s5CAQMA,M,qBACJ,eAAYC,OAAQ,IAAD,iKACjB,uTAAMA,QADW,MAWnBC,YAAc,WACZ,MAAKC,SAAS,CACZC,QAAS,IACTC,SAAU,GACVC,SAAU,GACVC,aAAa,KAhBE,MAqBnBC,aAAe,SAACC,GACc,MAAvB,MAAKC,MAAMN,SAA8B,MAAXK,GAAmB,MAAKC,MAAMH,YAC/D,MAAKJ,SAAS,CAAEC,QAASK,EAAQF,aAAa,IAGnB,MAAvB,MAAKG,MAAMN,QACb,MAAKD,SAAS,CACZC,QAAS,KAAOK,IAId,MAAKC,MAAMN,QAAQO,OAAS,GAC9B,MAAKR,SAAS,CAAEC,QAAS,MAAKM,MAAMN,QAAUK,IAE9C,MAAKG,YAnCM,MA0CnBC,QAAU,SAACJ,GAAY,IAAD,EACU,MAAKC,MAA7BJ,EADc,EACdA,SAAUD,EADI,EACJA,SAEW,KAAvB,MAAKK,MAAMN,SACbE,EAASQ,KAAKL,GACd,MAAKN,SAAS,CAAEG,cAGmB,IAA/B,MAAKI,MAAML,SAASM,QAA+C,IAA/B,MAAKD,MAAMJ,SAASK,QAC1DL,EAASQ,KAAKL,GACdJ,EAASS,KAAK,MAAKJ,MAAMN,SACzB,MAAKD,SAAS,CACZG,WACAD,WACAE,aAAa,EACbH,QAAS,OAKX,MAAKW,gBACLT,EAASQ,KAAKL,KA/DD,MAsEnBG,SAAW,WACTI,MAAM,6CACN,MAAKb,SAAS,CACZC,QAAS,OAzEM,MA8EnBW,cAAgB,WAAO,IAAD,aACkB,MAAKL,MAArCN,QADc,aACdA,QAASC,SADK,aACLA,SAAUC,SADL,aACKA,SACrBD,SAASM,OAAS,IACpBP,QAAUa,KAAKC,OAAOb,SAASA,SAASM,OAAS,GAAKL,SAASA,SAASK,OAAS,GAAKP,UACtFC,SAASS,KAAKV,SACd,MAAKD,SAAS,CAAEC,QAAS,GAAIC,kBAAUC,kBAAUC,aAAa,MAnF/C,MAyFnBY,UAAY,SAACV,QAAY,IAAD,aACgB,MAAKC,MAArCN,QADgB,aAChBA,QAASC,SADO,aACPA,SAAUC,SADH,aACGA,SAErBD,SAASM,OAAS,GAAiB,KAAZP,SACzBA,QAAUa,KAAKC,OAAOb,SAASA,SAASM,OAAS,GAAKL,SAASA,SAASK,OAAS,GAAKP,UACtF,MAAKD,SAAS,CAAEC,gBAASC,SAAU,GAAIC,SAAU,GAAIC,aAAa,EAAMa,OAAO,IAC5E,MAAKV,MAAMN,QAAQO,OAAS,IAC7BK,MAAM,UAGDX,SAASM,OAAS,GAA4B,KAAvB,MAAKD,MAAMN,SACzC,MAAKD,SAAS,CACZC,QAASC,SAASA,SAASM,OAAS,GACpCN,SAAU,GACVE,aAAa,EACbD,SAAU,MArGd,MAAKI,MAAQ,CACXN,QAAS,IACTC,SAAU,GACVC,SAAU,GACVC,aAAa,GAPE,M,sUAgHjB,IAAMc,EAAU,CACd,CAAEZ,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKtB,aACrC,CAAEO,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKX,SACrC,CAAEJ,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKX,SACrC,CAAEJ,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKX,SACrC,CAAEJ,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKX,SACrC,CAAEJ,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKhB,cACrC,CAAEC,OAAQ,IAAKa,KAAM,EAAGC,OAAQC,KAAKL,YAIvC,OACE,kEAAKM,UAAU,OAGb,2DAAC,kDAAD,CACEC,SAAUF,KAAKd,MAAMJ,SACrBqB,SAAUH,KAAKd,MAAML,SACrBuB,QAASJ,KAAKd,MAAMN,UAEtB,kEAAKqB,UAAU,WACZJ,EAAQQ,KAAI,SAACC,EAAKC,GAEjB,OAAO,2DAAC,kDAAD,CAAQC,IAAKD,EAAGtB,OAAQqB,EAAIrB,OAAQa,KAAMQ,EAAIR,KAAMW,QAAS,SAACC,GAAD,OAAaJ,EAAIP,OAAOW,UAIhG,oEAAG,qG,OAtJSC,8CA8JLnC,6B,oFClKToC,G,iBACF,WAAYnC,GAAO,IAAD,8BACd,4CAAMA,KAEDS,MAAQ,GAHC,E,sEASd,OACI,yBAAKe,UAAU,UAEVD,KAAKvB,MAAM0B,SAAShB,OAAS,EAAG,2BAAOc,UAAU,WAAWY,MAAQb,KAAKvB,MAAM0B,SAASH,KAAKvB,MAAM0B,SAAShB,OAAS,KAEtH,KAIH,yBAAKc,UAAU,UAAUD,KAAKvB,MAAMyB,SAASf,OAAS,EAAGa,KAAKvB,MAAMyB,SAASF,KAAKvB,MAAMyB,SAASf,OAAQ,GACxG,MAKG,2BAAQ2B,UAAW,EAAGb,UAAU,eAAgBY,MAAOb,KAAKvB,MAAM2B,e,GAzB9DO,cAkCNC,O,oFCjCTG,G,sLAEO,IAAD,OACJ,OACI,yBAAKd,UAAS,iBAAYD,KAAKvB,MAAMqB,OACjC,4BAAQG,UAAU,cAAae,QAAS,kBAAI,EAAKvC,MAAMgC,QAAQ,EAAKhC,MAAMQ,UAAWe,KAAKvB,MAAMQ,a,GAL3F0B,cAYNI,O,sICLKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9e8fd632.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Screen from './components/screen'\n\nimport Button from './components/button'\n\nimport './CSS files/App.css'\n\n\nclass Hello extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current: '0',\n      previous: [],\n      mathSign: [],\n      nextIsReset: false,\n    }\n  }\n\n  clearScreen = () => {\n    this.setState({\n      current: '0',\n      previous: [],\n      mathSign: [],\n      nextIsReset: false,\n\n    })\n  }\n\n  addToCurrent = (symbol) => {\n    if ((this.state.current === '0' && symbol !== '.') || this.state.nextIsReset) {\n      this.setState({ current: symbol, nextIsReset: false });\n    }\n    else {\n      if (this.state.current === \".\") {\n        this.setState({\n          current: \"0.\" + symbol\n        })\n      }\n      else {\n        if (this.state.current.length < 12) {\n          this.setState({ current: this.state.current + symbol })\n        }else{\n          this.redAlert()\n        }\n      }\n    }\n\n  }\n\n  addSign = (symbol) => {\n    let { mathSign, previous, } = this.state;\n\n    if (this.state.current === \"\") {\n      mathSign.push(symbol);\n      this.setState({ mathSign })\n    }\n    else {\n      if (this.state.previous.length === 0 && this.state.mathSign.length === 0) {\n        mathSign.push(symbol)\n        previous.push(this.state.current)\n        this.setState({\n          mathSign,\n          previous,\n          nextIsReset: true,\n          current: \"\"\n\n        })\n      }\n      else {\n        this.autoCalculate();\n        mathSign.push(symbol)\n\n      }\n    }\n\n  }\n\n  redAlert = () => {\n    alert(\"Out of Range, not more than 12 characters\");\n    this.setState({\n      current :\"0\"\n    })\n\n  }\n\n  autoCalculate = () => {\n    let { current, previous, mathSign } = this.state;\n    if (previous.length > 0) {\n      current = eval(String(previous[previous.length - 1] + mathSign[mathSign.length - 1] + current));\n      previous.push(current);\n      this.setState({ current: \"\", previous, mathSign, nextIsReset: true })\n    }\n    \n\n  }\n\n  calculate = (symbol) => {\n    let { current, previous, mathSign } = this.state; \n\n    if (previous.length > 0 && current !== \"\") {\n      current = eval(String(previous[previous.length - 1] + mathSign[mathSign.length - 1] + current));\n      this.setState({ current, previous: [], mathSign: [], nextIsReset: true, signs: false })\n      if(this.state.current.length > 12){\n        alert(\"hello\")\n      }\n    } \n    else if (previous.length > 0 && this.state.current === \"\") {\n      this.setState({\n        current: previous[previous.length - 1],\n        previous: [],\n        nextIsReset: true,\n        mathSign: []\n      })\n    }\n\n  }\n\n\n  render() {\n    const buttons = [\n      { symbol: 'C', cols: 3, action: this.clearScreen },\n      { symbol: '/', cols: 1, action: this.addSign },\n      { symbol: '7', cols: 1, action: this.addToCurrent },\n      { symbol: '8', cols: 1, action: this.addToCurrent },\n      { symbol: '9', cols: 1, action: this.addToCurrent },\n      { symbol: '*', cols: 1, action: this.addSign },\n      { symbol: '4', cols: 1, action: this.addToCurrent },\n      { symbol: '5', cols: 1, action: this.addToCurrent },\n      { symbol: '6', cols: 1, action: this.addToCurrent },\n      { symbol: '-', cols: 1, action: this.addSign },\n      { symbol: '1', cols: 1, action: this.addToCurrent },\n      { symbol: '2', cols: 1, action: this.addToCurrent },\n      { symbol: '3', cols: 1, action: this.addToCurrent },\n      { symbol: '+', cols: 1, action: this.addSign },\n      { symbol: '0', cols: 2, action: this.addToCurrent },\n      { symbol: '.', cols: 1, action: this.addToCurrent },\n      { symbol: '=', cols: 1, action: this.calculate },\n\n\n    ];\n    return (\n      <div className=\"App\">\n\n\n        <Screen\n          symboled={this.state.mathSign}\n          preValue={this.state.previous}\n          display={this.state.current} />\n        \n        <div className='buttons'>\n          {buttons.map((btn, i) => {\n\n            return <Button key={i} symbol={btn.symbol} cols={btn.cols} actions={(symbols) => btn.action(symbols)} />\n          })}\n\n        </div>\n        <p><b>Simple React Calculator</b></p>\n      </div>\n    )\n  }\n\n}\n\n\nexport default Hello;\n","import React, { Component } from 'react';\r\nimport './component.css'\r\n\r\n\r\nclass Screen extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"screen\">\r\n\r\n                {this.props.preValue.length > 0? <input className=\"preValue\" value= {this.props.preValue[this.props.preValue.length - 1]}/> \r\n                :\r\n                null}\r\n\r\n            \r\n            \r\n             <div className=\"symbol\">{this.props.symboled.length > 0 ?this.props.symboled[this.props.symboled.length -1 ]\r\n             :null\r\n            }\r\n             \r\n             </div>\r\n            \r\n                 <input  maxLength={5} className=\"screenResult\"  value={this.props.display}/>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Screen;","import React, { Component } from 'react'\r\n\r\nimport './component.css'\r\n\r\n\r\nclass Button extends Component {\r\n   \r\n    render(){\r\n        return(\r\n            <div className={`column-${this.props.cols}`}>\r\n                <button className=\"calc-button\"onClick={()=>this.props.actions(this.props.symbol)} >{this.props.symbol}</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Button;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}